
TestNG TDD Framework Building Steps:
  1. Create a maven project
  2. Add project related dependencies (Selenium Java, TestNG, WebdriverManager,etc)
  3. Create the package structure
  4. Add .gitignore file
  5. Add the utility classes (SeleniumUtils, Driver, ConfigReader)
  6. Add the .properties file with the project specific global variables
  7. Add TestBase class with Before and After annotations
  8. Add Extent reports for visual html reports
  9. Add Parallel and Cross-Browser test support.
  10. Add Test classes with tests
  11. Add Page classes with locators and methods
  12. Create and configure a testng.xml file for specific test suite
  13. Add maven surefire plugin to pom.xml and configure it to be able to pass xml file name from the command line



TestNG TDD framework components:

- Selenium - interact with browser, write UI test scripts
- Java - programming language to write any code
- TestNG - organize, configure and run tests, assertions.
- Maven - manage dependencies, create project structure, run tests through CMD
- WebDriverManager (bonigarcia) - manage browser drivers
- Faker - generate mock test data
- Extent reports - generate html reports
- Utility classes - provide re-usable utility methods
- config.properties - store project's global configuration variables such as browser type, url, username, passwords
- testng.xml files - control and configure the execution tests
- .gitignore file - exclude certain files and folders from being version controlled



Design patterns used in the framework:

Singleton Design Pattern -> A design pattern where an instantiation of a class is restricted to only one object.

                           An example could be the Driver class where the Webdriver instantiation is done by getDriver() method that checks if the the WebDriver obj is already initialized.
                           The purpose of using this pattern is to prevent multiple WebDriver objects being initialized.

Page Object Model Design Pattern -> A design pattern specific to Selenium based test frameworks which is implemented by creating a separate class for each page of our
                                    application which stores the page web elements and methods.
                                    A design pattern that simplifies writing UI tests by creating a separate Page Object Classes where the elements of the page are stored. We usually use
                                    Page Object Model along with Page Factory where we use @FindBy annotations and a constructor with factory method PageFactory.initElements() method.
                                    The purpose is re-usability, maintainability and readability.
PageFactory design pattern ->      This pattern uses @FindBy annotations to locate the elements and makes our Page classes more readable and concise.
                                   We implement it by using PageFactory.initElements() method in a constructor of the page class
                                   We also can use @FindBys to create chained matches and @FindAll to match multiple webelements on the page

Maven questions:

 Maven plugin vs dependency ->     Dependency -> collection of libraries(jar files) that is used for specific purpose. Example, Faker dependency for generating mock data
                                   Plugin -> Maven related tool that executes specific task. Example: Maven Surefire plugin executes tests. Maven is a collection of multiple of these plugins
 Maven Lifecycle           ->      Lifecycle -> Executable maven command that performs specific task. Each command executes its previous commands first. The order of execution is ->   clean
                                                                                                                                                                                        validate
                                                                                                                                                                                        compile
                                                                                                                                                                                        test
                                                                                                                                                                                        package
                                                                                                                                                                                        verify
                                                                                                                                                                                        install
                                                                                                                                                                                        site
                                                                                                                                                                                        deploy
 Run tests through CMD       ->      We run the tests through command line with "mvn test" command in our framework using Maven Surefire plugin
                                     We add a placeholder for the xml file name in Surefire plugin (${xmlFile}) and when running tests pass the name of the xml file with -D option
                                     mvn test -D xmlFile=regression.xml

 Cross-browser testing       ->    We implement it in our framework by passing the browser type through command line like: mvn test -D browser=chrome
                                   And we simply execute multiple commands for different browser types
                                   We can use Windows batch file or Mac shell script file to execute all commands in a sequence

Parallel Tests - running groups of tests in parallel to reduce execution time and get faster feedback

                   How to implement:

                   1. Setup Selenium Grid with Hub and multiple nodes and direct your tests to the central Hub which automatically distributes
                      the tests among nodes.
                      Pros: More scalable, reliable, little maintenance after initial setup.
                      Cons: Complex to setup, can be more costly than native setup, especially when using third party cloud services
                             such as SauceLabs, BrowserStack.

                   2. Setup natively through TestNG xml file.
                      a)Add parallel attribute to <suite> tag along with thread-count attribute where you indicate the amount of threads
                      Default thread-count is 5 if not given.
                      Parallel attribute can take methods, classes and tests.
                      2)Adjust the singleton Driver class with ThreadLocal<WebDriver> to give each thread its own WebDriver

  Re-run failed
  tests          -  Let's say you have 800 tests in your regression suite and 10 of them failed. How to re-run those 10 without running all of them again?
                    TestNG automatically generates testng-failed.xml file in surefire-reports folder, I locate and run that file.
                     We can automate it by creating a batch/shell script file with the following commands:
                     mvn clean test -D xmlFile=regression.xml
                     mvn test -D xmlFile=target/surefire-reports/testng-failed.xml




   Can you explain your framework?


   More general -> more specific

  Description -> Components -> Architecture -> Specific packages -> Classes/Utilities


  TestNG Selenium TDD Framework components:
  Java - programming language to write code
  Selenium - write code to interact with web browser
  TestNG - organize, configure, and execute tests
  Webdrivermanager(bonigarcia) - manage browser drivers
  Maven - define the project structure, manage dependencies, run tests through command line
  Faker - generate mock data for data driven testing
  Extent report - generate enhanced html report and add logs
  .gitignore file - to exclude non-project related files from being version controlled (tracked and pushed to GitHub)
  config.properties file - to store project's global variables such as env variables, usernames, passwords, paths, etc.
  testng.xml file/s - control and configure the execution of the tests
  Utility Classes - classes that support our automated tests
Architecture:
     -Design patterns used: Page Object Model and Page Factory, Singleton
     -OOP Principles used: Inheritance, Abstraction, Polymorphism, Encapsulation
     -Base classes



Types of tests the framework supports:
  Functional,
  Smoke,
  Regression,
  Integration,
  UI, API, DB
  Cross Browser,
  Headless,
  Parallel,
  Data-Driven tests
  End-to-end testing (horizontal(within one layer), vertical(involving multiple layers))



